// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name  String?
  email String? @unique
  image String?

  // next-auth の prisma-adapter 用の設定
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  repositories Repository[]
  tips         Tip[]

  @@map("users")
}

// next-auth の prisma-adapter 用テーブル
model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Repository {
  id        Int      @id @default(autoincrement()) @map("id")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  url       String   @map("url")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  files File[]

  @@map("repositories")
}

model File {
  id           Int        @id @default(autoincrement()) @map("id")
  repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId Int        @map("repository_id")
  path         String     @map("path")
  downloadUrl  String     @map("download_url")
  isTipTarget  Boolean    @map("is_tip_target")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  tip Tip?

  @@map("files")
}

model Tip {
  id        Int      @id @default(autoincrement()) @map("id")
  file      File     @relation(fields: [fileId], references: [id])
  fileId    Int      @unique @map("file_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  title     String   @map("title")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  TipRead TipRead[]

  @@map("tips")
}

model TipRead {
  id        Int      @id @default(autoincrement()) @map("id")
  tip       Tip      @relation(fields: [tipId], references: [id])
  tipId     Int      @map("tip_id")
  readAt    DateTime @map("read_at") @db.Timestamptz // クライアント側で読了記録した時間を格納するので、データベースのnow()ではない
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("tip_reads")
}
